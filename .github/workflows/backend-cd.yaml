name: backend-cd
on:
  workflow_dispatch:
  push:
    branches: 
      - main
    paths: 
      - 'starter/backend/**'

env:
  AWS_REGION: 'us-east-1'

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3 
    - name: install pipenv tool
      run: |
        pip install pipenv 
        pip install flake8
    - name: pipenv install
      run: cd starter/backend && pipenv install
    - name: run test 
      run: cd starter/backend && pipenv run lint


  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3 
    - name: install pipenv tool
      run: pip install pipenv
    - name: pipenv install
      run: cd starter/backend && pipenv install
    - name: run test 
      run: cd starter/backend && pipenv run test        


  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:

    # Step 1: Checkout to the new code
    - name: Checkout
      uses: actions/checkout@v3 

    # Step 2: Build the dependencies 
    - name: install pipenv tool
      run: pip install pipenv
    - name: pipenv install
      run: cd starter/backend && pipenv install
      
    # Step 3: Build image
    - name: Build Docker image
      run: |
        cd starter/backend && docker build -t my-backend-app:${{ github.sha }} .
    
    # Step 4: Configure the aws credentials
    - name: set aws credentials
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID && aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    
    # Step 5: Login to docker
    - name: docker login
      uses: aws-actions/amazon-ecr-login@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        

    # Step 6: Push image to AWS ECR
    - name: Push Docker image to ECR
      run: |
        IMAGE_URI=$(aws ecr describe-repositories --repository-names backend --region us-east-1 --query 'repositories[0].repositoryUri' --output text)
        docker tag my-backend-app:${{ github.sha }} $IMAGE_URI:${{ github.sha }}
        docker push $IMAGE_URI:${{ github.sha }}

    # Step 7: Install Kustomize
    - name: Install Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    # Step 8: Configure kubeconfig for EKS
    - name: Configure kubeconfig for EKS
      run: aws eks update-kubeconfig --region us-east-1 --name cluster
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # Step 9: Update Kubernetes Manifests with New Image
    - name: Update image in Kubernetes manifests
      working-directory: starter/backend/k8s
      run: |
        IMAGE_URI=$(aws ecr describe-repositories --repository-names backend --region us-east-1 --query 'repositories[0].repositoryUri' --output text)
        kustomize edit set image backend=$IMAGE_URI:${{ github.sha }}

    # Step 10: Deploy to Kubernetes Cluster
    - name: Deploy to Kubernetes
      working-directory: starter/backend/k8s
      run: kustomize build | kubectl apply -f -
